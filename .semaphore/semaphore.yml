# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name your pipeline. In case you connect multiple pipelines with promotions,
# the name will help you differentiate between, for example, a CI build phase
# and delivery phases.
name: Semaphore Pipeline

# An agent defines the environment in which your code runs.
# It is a combination of one of the available machine types and operating
# system images.
# See https://docs.semaphoreci.com/article/20-machine-types
# and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004

global_job_config:
  prologue:
    commands:
      - sem-version python 3.8

# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: "Install Dependencies"
    task:
      # This block installs all the python dependencies,
      # as well as all the required Linux packages.
      # The prologue section is always executed before each job on
      # the block.
      # See https://docs.semaphoreci.com/article/50-pipeline-yaml#prologue
      prologue:
        commands:
          # Set the python version.
          - sudo apt-get update && sudo apt-get install -y python3-dev expect && sudo apt-get install default-libmysqlclient-dev 
      jobs:
        - name: pip
          commands:
            # Get the latest version of our source code from GitHub:
            # See https://docs.semaphoreci.com/article/54-toolbox-reference#checkout
            - checkout
            # Restore dependencies from cache. This command will not fail in
            # case of a cache miss. In case of a cache hit, pip can use it
            # to speed up the installation.
            # For more info on caching, see https://docs.semaphoreci.com/article/149-caching
            - cache restore
            # Install python dependencies.
            # If not found in the cache, pip will download them.
            - pip download --cache-dir .pip_cache -r requirements.txt
            # Persist downloaded packages for future jobs.
            - cache store

  - name: "Run Unit Tests"
    task:
      # This block runs the unit tests.
    
      prologue:
        commands:
          - checkout
          - cache restore
          - pip install -r requirements.txt --cache-dir .pip_cache
      # Two parallel test jobs are executed.
      jobs:
        - name: Test routes
          commands:
            # Test the application's routes.
            - pytest   

  - name: Deploy to production
    task:
      jobs:
        - name: Deploy
          # environment:
          #   SERVER_IP: <your-server-ip>
          #   SERVER_USER: <your-server-username>
          #   SEVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }} 
            # SSH_PRIVATE_KEY: ${{SECRET:your-secret-ssh-key}}
          commands:

            - expect -c 'spawn ssh root@109.74.202.103; expect {
                  "Are you sure you want to continue connecting (yes/no)?" {
                      send "yes\r"
                      exp_continue
                  }
                  "password:" {
                      send "Muhammed-1998\r"
                      interact
                  }
              }'

            - cd flask-semaphore && git pull #I am still not able to access my remote server
            - ls
